package cl.agj.extra.utils {		import cl.agj.core.TidyEventDispatcher;	import cl.agj.core.net.SimpleLoader;		import com.adobe.serialization.json.JSON;		import flash.events.ErrorEvent;	import flash.events.Event;		import org.osflash.signals.events.GenericEvent;
		/**	 * This class manages strings, particularly suited for translations, based on a properly	 * formatted JSON file. This is the format:	 * 	 * "Some text": {	 *     "spanish": "Un texto",	 *     "française": "Une texte"	 * }	 * 	 * Repeat for as many text strings and languages you may have.	 * 	 * Call load() if you want to load from an external file, or use setJSON() to directly reference	 * a JSON string. Remember to set the language property before you call translate().	 * 	 * Dispatches Event.COMPLETE upon load, or ErrorEvent.ERROR if there was an error loading.	 * 	 * @author agj	 */	public class StringsManager extends TidyEventDispatcher {				public function StringsManager():void {					}				/////				public var language:String;				private static var _instance:StringsManager;		private static var _allowInstantiation:Boolean;		private var _loader:SimpleLoader;		private var _json:Object;				/////				public function loadJSON(jsonURL:String):void {			_loader = new SimpleLoader(jsonURL);			_loader.finished.addOnce(onLoaded);		}				public function setJSON(jsonString:String):void {			_json = com.adobe.serialization.json.JSON.decode(jsonString);		}				public function translate(string:String):String {			var fixed:String = fixString(string);			if (!string ||　!language || !_json || !_json[fixed] || !_json[fixed][language]) {				return string;			}						return fixString(_json[fixed][language], true);		}				public function get hasData():Boolean {			return (_json != null);		}				//////////				protected function fixString(string:String, back:Boolean = false):String {			if (!back)				string = string.replace(/(\r\n|\r|\n)/g, "|").replace(/(^ | $)/g, "");			else				string = string.replace(/\|/g, "\n");			return string;		}				protected function onLoaded(e:GenericEvent):void {			var loader:SimpleLoader = SimpleLoader(e.target);			if (!loader.success) {				dispatchEvent(new ErrorEvent(ErrorEvent.ERROR, false, false, "StringsManager: Could not load file."));				return;			}			setJSON(loader.data as String);			dispatchEvent(new Event(Event.COMPLETE));		}			}}